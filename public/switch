<!DOCTYPE html>
<html>
  <head>
    <meta charset="utf-8">
    <title>Go by Example: Switch</title>
    <link rel=stylesheet href="site.css">
  </head>
  <script>
      onkeydown = (e) => {
          
          if (e.key == "ArrowLeft") {
              window.location.href = 'if-else';
          }
          
          
          if (e.key == "ArrowRight") {
              window.location.href = 'arrays';
          }
          
      }

      function onChange(e) {
        window.location.href = event.target.value
      }

      window.addEventListener('DOMContentLoaded', () => {
        document.getElementById("examples").value = window.location.pathname.replace('/', '')
      })
  </script>
  <body>
    <div class="example" id="switch">
      <h2><a href="./">Go by Example</a>: Switch</h2>
      
      <table>
        
        <tr>
          <td class="docs">
            <p><em>Switch statements</em> express conditionals across many
branches.</p>

          </td>
          <td class="code empty leading">
            
          
          </td>
        </tr>
        
        <tr>
          <td class="docs">
            
          </td>
          <td class="code leading">
            <a href="http://play.golang.org/p/qVDqWoUQ6AI"><img title="Run code" src="play.png" class="run" /></a><img title="Copy code" src="clipboard.png" class="copy" />
          <div class="highlight"><pre><span class="kn">package</span> <span class="nx">main</span>
</pre></div>

          </td>
        </tr>
        
        <tr>
          <td class="docs">
            
          </td>
          <td class="code leading">
            
          <div class="highlight"><pre><span class="kn">import</span> <span class="p">(</span>
    <span class="s">&quot;fmt&quot;</span>
    <span class="s">&quot;time&quot;</span>
<span class="p">)</span>
</pre></div>

          </td>
        </tr>
        
        <tr>
          <td class="docs">
            
          </td>
          <td class="code leading">
            
          <div class="highlight"><pre><span class="kd">func</span> <span class="nx">main</span><span class="p">()</span> <span class="p">{</span>
</pre></div>

          </td>
        </tr>
        
        <tr>
          <td class="docs">
            <p>Here&rsquo;s a basic <code>switch</code>.</p>

          </td>
          <td class="code leading">
            
          <div class="highlight"><pre>    <span class="nx">i</span> <span class="o">:=</span> <span class="mi">2</span>
    <span class="nx">fmt</span><span class="p">.</span><span class="nx">Print</span><span class="p">(</span><span class="s">&quot;Write &quot;</span><span class="p">,</span> <span class="nx">i</span><span class="p">,</span> <span class="s">&quot; as &quot;</span><span class="p">)</span>
    <span class="k">switch</span> <span class="nx">i</span> <span class="p">{</span>
    <span class="k">case</span> <span class="mi">1</span><span class="p">:</span>
        <span class="nx">fmt</span><span class="p">.</span><span class="nx">Println</span><span class="p">(</span><span class="s">&quot;one&quot;</span><span class="p">)</span>
    <span class="k">case</span> <span class="mi">2</span><span class="p">:</span>
        <span class="nx">fmt</span><span class="p">.</span><span class="nx">Println</span><span class="p">(</span><span class="s">&quot;two&quot;</span><span class="p">)</span>
    <span class="k">case</span> <span class="mi">3</span><span class="p">:</span>
        <span class="nx">fmt</span><span class="p">.</span><span class="nx">Println</span><span class="p">(</span><span class="s">&quot;three&quot;</span><span class="p">)</span>
    <span class="p">}</span>
</pre></div>

          </td>
        </tr>
        
        <tr>
          <td class="docs">
            <p>You can use commas to separate multiple expressions
in the same <code>case</code> statement. We use the optional
<code>default</code> case in this example as well.</p>

          </td>
          <td class="code leading">
            
          <div class="highlight"><pre>    <span class="k">switch</span> <span class="nx">time</span><span class="p">.</span><span class="nx">Now</span><span class="p">().</span><span class="nx">Weekday</span><span class="p">()</span> <span class="p">{</span>
    <span class="k">case</span> <span class="nx">time</span><span class="p">.</span><span class="nx">Saturday</span><span class="p">,</span> <span class="nx">time</span><span class="p">.</span><span class="nx">Sunday</span><span class="p">:</span>
        <span class="nx">fmt</span><span class="p">.</span><span class="nx">Println</span><span class="p">(</span><span class="s">&quot;It&#39;s the weekend&quot;</span><span class="p">)</span>
    <span class="k">default</span><span class="p">:</span>
        <span class="nx">fmt</span><span class="p">.</span><span class="nx">Println</span><span class="p">(</span><span class="s">&quot;It&#39;s a weekday&quot;</span><span class="p">)</span>
    <span class="p">}</span>
</pre></div>

          </td>
        </tr>
        
        <tr>
          <td class="docs">
            <p><code>switch</code> without an expression is an alternate way
to express if/else logic. Here we also show how the
<code>case</code> expressions can be non-constants.</p>

          </td>
          <td class="code leading">
            
          <div class="highlight"><pre>    <span class="nx">t</span> <span class="o">:=</span> <span class="nx">time</span><span class="p">.</span><span class="nx">Now</span><span class="p">()</span>
    <span class="k">switch</span> <span class="p">{</span>
    <span class="k">case</span> <span class="nx">t</span><span class="p">.</span><span class="nx">Hour</span><span class="p">()</span> <span class="p">&lt;</span> <span class="mi">12</span><span class="p">:</span>
        <span class="nx">fmt</span><span class="p">.</span><span class="nx">Println</span><span class="p">(</span><span class="s">&quot;It&#39;s before noon&quot;</span><span class="p">)</span>
    <span class="k">default</span><span class="p">:</span>
        <span class="nx">fmt</span><span class="p">.</span><span class="nx">Println</span><span class="p">(</span><span class="s">&quot;It&#39;s after noon&quot;</span><span class="p">)</span>
    <span class="p">}</span>
</pre></div>

          </td>
        </tr>
        
        <tr>
          <td class="docs">
            <p>A type <code>switch</code> compares types instead of values.  You
can use this to discover the type of an interface
value.  In this example, the variable <code>t</code> will have the
type corresponding to its clause.</p>

          </td>
          <td class="code">
            
          <div class="highlight"><pre>    <span class="nx">whatAmI</span> <span class="o">:=</span> <span class="kd">func</span><span class="p">(</span><span class="nx">i</span> <span class="kd">interface</span><span class="p">{})</span> <span class="p">{</span>
        <span class="k">switch</span> <span class="nx">t</span> <span class="o">:=</span> <span class="nx">i</span><span class="p">.(</span><span class="kd">type</span><span class="p">)</span> <span class="p">{</span>
        <span class="k">case</span> <span class="kt">bool</span><span class="p">:</span>
            <span class="nx">fmt</span><span class="p">.</span><span class="nx">Println</span><span class="p">(</span><span class="s">&quot;I&#39;m a bool&quot;</span><span class="p">)</span>
        <span class="k">case</span> <span class="kt">int</span><span class="p">:</span>
            <span class="nx">fmt</span><span class="p">.</span><span class="nx">Println</span><span class="p">(</span><span class="s">&quot;I&#39;m an int&quot;</span><span class="p">)</span>
        <span class="k">default</span><span class="p">:</span>
            <span class="nx">fmt</span><span class="p">.</span><span class="nx">Printf</span><span class="p">(</span><span class="s">&quot;Don&#39;t know type %T\n&quot;</span><span class="p">,</span> <span class="nx">t</span><span class="p">)</span>
        <span class="p">}</span>
    <span class="p">}</span>
    <span class="nx">whatAmI</span><span class="p">(</span><span class="kc">true</span><span class="p">)</span>
    <span class="nx">whatAmI</span><span class="p">(</span><span class="mi">1</span><span class="p">)</span>
    <span class="nx">whatAmI</span><span class="p">(</span><span class="s">&quot;hey&quot;</span><span class="p">)</span>
<span class="p">}</span>
</pre></div>

          </td>
        </tr>
        
      </table>
      
      <table>
        
        <tr>
          <td class="docs">
            
          </td>
          <td class="code">
            
          <div class="highlight"><pre><span class="gp">$</span> go run switch.go 
<span class="go">Write 2 as two</span>
<span class="go">It&#39;s a weekday</span>
<span class="go">It&#39;s after noon</span>
<span class="go">I&#39;m a bool</span>
<span class="go">I&#39;m an int</span>
<span class="go">Don&#39;t know type string</span>
</pre></div>

          </td>
        </tr>
        
      </table>
      
      
      <p class="next">
        Next example: <a href="arrays">Arrays</a>.
      </p>
      
      <p class="next">
        Jump to:
        <select id="examples" onchange="onChange(event)">
        
          <option value="hello-world">Hello World</option>  
        
          <option value="values">Values</option>  
        
          <option value="variables">Variables</option>  
        
          <option value="constants">Constants</option>  
        
          <option value="for">For</option>  
        
          <option value="if-else">If/Else</option>  
        
          <option value="switch">Switch</option>  
        
          <option value="arrays">Arrays</option>  
        
          <option value="slices">Slices</option>  
        
          <option value="maps">Maps</option>  
        
          <option value="range">Range</option>  
        
          <option value="functions">Functions</option>  
        
          <option value="multiple-return-values">Multiple Return Values</option>  
        
          <option value="variadic-functions">Variadic Functions</option>  
        
          <option value="closures">Closures</option>  
        
          <option value="recursion">Recursion</option>  
        
          <option value="pointers">Pointers</option>  
        
          <option value="structs">Structs</option>  
        
          <option value="methods">Methods</option>  
        
          <option value="interfaces">Interfaces</option>  
        
          <option value="errors">Errors</option>  
        
          <option value="goroutines">Goroutines</option>  
        
          <option value="channels">Channels</option>  
        
          <option value="channel-buffering">Channel Buffering</option>  
        
          <option value="channel-synchronization">Channel Synchronization</option>  
        
          <option value="channel-directions">Channel Directions</option>  
        
          <option value="select">Select</option>  
        
          <option value="timeouts">Timeouts</option>  
        
          <option value="non-blocking-channel-operations">Non-Blocking Channel Operations</option>  
        
          <option value="closing-channels">Closing Channels</option>  
        
          <option value="range-over-channels">Range over Channels</option>  
        
          <option value="timers">Timers</option>  
        
          <option value="tickers">Tickers</option>  
        
          <option value="worker-pools">Worker Pools</option>  
        
          <option value="waitgroups">WaitGroups</option>  
        
          <option value="rate-limiting">Rate Limiting</option>  
        
          <option value="atomic-counters">Atomic Counters</option>  
        
          <option value="mutexes">Mutexes</option>  
        
          <option value="stateful-goroutines">Stateful Goroutines</option>  
        
          <option value="sorting">Sorting</option>  
        
          <option value="sorting-by-functions">Sorting by Functions</option>  
        
          <option value="panic">Panic</option>  
        
          <option value="defer">Defer</option>  
        
          <option value="collection-functions">Collection Functions</option>  
        
          <option value="string-functions">String Functions</option>  
        
          <option value="string-formatting">String Formatting</option>  
        
          <option value="regular-expressions">Regular Expressions</option>  
        
          <option value="json">JSON</option>  
        
          <option value="xml">XML</option>  
        
          <option value="time">Time</option>  
        
          <option value="epoch">Epoch</option>  
        
          <option value="time-formatting-parsing">Time Formatting / Parsing</option>  
        
          <option value="random-numbers">Random Numbers</option>  
        
          <option value="number-parsing">Number Parsing</option>  
        
          <option value="url-parsing">URL Parsing</option>  
        
          <option value="sha1-hashes">SHA1 Hashes</option>  
        
          <option value="base64-encoding">Base64 Encoding</option>  
        
          <option value="reading-files">Reading Files</option>  
        
          <option value="writing-files">Writing Files</option>  
        
          <option value="line-filters">Line Filters</option>  
        
          <option value="file-paths">File Paths</option>  
        
          <option value="directories">Directories</option>  
        
          <option value="temporary-files-and-directories">Temporary Files and Directories</option>  
        
          <option value="testing">Testing</option>  
        
          <option value="command-line-arguments">Command-Line Arguments</option>  
        
          <option value="command-line-flags">Command-Line Flags</option>  
        
          <option value="command-line-subcommands">Command-Line Subcommands</option>  
        
          <option value="environment-variables">Environment Variables</option>  
        
          <option value="http-clients">HTTP Clients</option>  
        
          <option value="http-servers">HTTP Servers</option>  
        
          <option value="context">Context</option>  
        
          <option value="spawning-processes">Spawning Processes</option>  
        
          <option value="execing-processes">Exec'ing Processes</option>  
        
          <option value="signals">Signals</option>  
        
          <option value="exit">Exit</option>  
        
        </select>
      </p>
      <p class="footer">
        by <a href="https://markmcgranaghan.com">Mark McGranaghan</a> | <a href="https://github.com/mmcgrana/gobyexample/blob/master/examples/switch">source</a> | <a href="https://github.com/mmcgrana/gobyexample#license">license</a>
      </p>
    </div>
    <script>
      var codeLines = [];
      codeLines.push('');codeLines.push('package main\u000A');codeLines.push('import (\u000A    \"fmt\"\u000A    \"time\"\u000A)\u000A');codeLines.push('func main() {\u000A');codeLines.push('    i := 2\u000A    fmt.Print(\"Write \", i, \" as \")\u000A    switch i {\u000A    case 1:\u000A        fmt.Println(\"one\")\u000A    case 2:\u000A        fmt.Println(\"two\")\u000A    case 3:\u000A        fmt.Println(\"three\")\u000A    }\u000A');codeLines.push('    switch time.Now().Weekday() {\u000A    case time.Saturday, time.Sunday:\u000A        fmt.Println(\"It\'s the weekend\")\u000A    default:\u000A        fmt.Println(\"It\'s a weekday\")\u000A    }\u000A');codeLines.push('    t := time.Now()\u000A    switch {\u000A    case t.Hour() \x3C 12:\u000A        fmt.Println(\"It\'s before noon\")\u000A    default:\u000A        fmt.Println(\"It\'s after noon\")\u000A    }\u000A');codeLines.push('    whatAmI := func(i interface{}) {\u000A        switch t := i.(type) {\u000A        case bool:\u000A            fmt.Println(\"I\'m a bool\")\u000A        case int:\u000A            fmt.Println(\"I\'m an int\")\u000A        default:\u000A            fmt.Printf(\"Don\'t know type %T\\n\", t)\u000A        }\u000A    }\u000A    whatAmI(true)\u000A    whatAmI(1)\u000A    whatAmI(\"hey\")\u000A}\u000A');codeLines.push('');
    </script>
    <script src="site.js" async></script>
  </body>
</html>
