<!DOCTYPE html>
<html>
  <head>
    <meta charset="utf-8">
    <title>Go by Example: Sorting by Functions</title>
    <link rel=stylesheet href="site.css">
  </head>
  <script>
      onkeydown = (e) => {
          
          if (e.key == "ArrowLeft") {
              window.location.href = 'sorting';
          }
          
          
          if (e.key == "ArrowRight") {
              window.location.href = 'panic';
          }
          
      }

      function onChange(e) {
        window.location.href = event.target.value
      }

      window.addEventListener('DOMContentLoaded', () => {
        document.getElementById("examples").value = window.location.pathname.replace('/', '')
      })
  </script>
  <body>
    <div class="example" id="sorting-by-functions">
      <h2><a href="./">Go by Example</a>: Sorting by Functions</h2>
      
      <table>
        
        <tr>
          <td class="docs">
            <p>Sometimes we&rsquo;ll want to sort a collection by something
other than its natural order. For example, suppose we
wanted to sort strings by their length instead of
alphabetically. Here&rsquo;s an example of custom sorts
in Go.</p>

          </td>
          <td class="code empty leading">
            
          
          </td>
        </tr>
        
        <tr>
          <td class="docs">
            
          </td>
          <td class="code leading">
            <a href="http://play.golang.org/p/h4g4vaLBtkw"><img title="Run code" src="play.png" class="run" /></a><img title="Copy code" src="clipboard.png" class="copy" />
          <div class="highlight"><pre><span class="kn">package</span> <span class="nx">main</span>
</pre></div>

          </td>
        </tr>
        
        <tr>
          <td class="docs">
            
          </td>
          <td class="code leading">
            
          <div class="highlight"><pre><span class="kn">import</span> <span class="p">(</span>
    <span class="s">&quot;fmt&quot;</span>
    <span class="s">&quot;sort&quot;</span>
<span class="p">)</span>
</pre></div>

          </td>
        </tr>
        
        <tr>
          <td class="docs">
            <p>In order to sort by a custom function in Go, we need a
corresponding type. Here we&rsquo;ve created a <code>byLength</code>
type that is just an alias for the builtin <code>[]string</code>
type.</p>

          </td>
          <td class="code leading">
            
          <div class="highlight"><pre><span class="kd">type</span> <span class="nx">byLength</span> <span class="p">[]</span><span class="kt">string</span>
</pre></div>

          </td>
        </tr>
        
        <tr>
          <td class="docs">
            <p>We implement <code>sort.Interface</code> - <code>Len</code>, <code>Less</code>, and
<code>Swap</code> - on our type so we can use the <code>sort</code> package&rsquo;s
generic <code>Sort</code> function. <code>Len</code> and <code>Swap</code>
will usually be similar across types and <code>Less</code> will
hold the actual custom sorting logic. In our case we
want to sort in order of increasing string length, so
we use <code>len(s[i])</code> and <code>len(s[j])</code> here.</p>

          </td>
          <td class="code leading">
            
          <div class="highlight"><pre><span class="kd">func</span> <span class="p">(</span><span class="nx">s</span> <span class="nx">byLength</span><span class="p">)</span> <span class="nx">Len</span><span class="p">()</span> <span class="kt">int</span> <span class="p">{</span>
    <span class="k">return</span> <span class="nb">len</span><span class="p">(</span><span class="nx">s</span><span class="p">)</span>
<span class="p">}</span>
<span class="kd">func</span> <span class="p">(</span><span class="nx">s</span> <span class="nx">byLength</span><span class="p">)</span> <span class="nx">Swap</span><span class="p">(</span><span class="nx">i</span><span class="p">,</span> <span class="nx">j</span> <span class="kt">int</span><span class="p">)</span> <span class="p">{</span>
    <span class="nx">s</span><span class="p">[</span><span class="nx">i</span><span class="p">],</span> <span class="nx">s</span><span class="p">[</span><span class="nx">j</span><span class="p">]</span> <span class="p">=</span> <span class="nx">s</span><span class="p">[</span><span class="nx">j</span><span class="p">],</span> <span class="nx">s</span><span class="p">[</span><span class="nx">i</span><span class="p">]</span>
<span class="p">}</span>
<span class="kd">func</span> <span class="p">(</span><span class="nx">s</span> <span class="nx">byLength</span><span class="p">)</span> <span class="nx">Less</span><span class="p">(</span><span class="nx">i</span><span class="p">,</span> <span class="nx">j</span> <span class="kt">int</span><span class="p">)</span> <span class="kt">bool</span> <span class="p">{</span>
    <span class="k">return</span> <span class="nb">len</span><span class="p">(</span><span class="nx">s</span><span class="p">[</span><span class="nx">i</span><span class="p">])</span> <span class="p">&lt;</span> <span class="nb">len</span><span class="p">(</span><span class="nx">s</span><span class="p">[</span><span class="nx">j</span><span class="p">])</span>
<span class="p">}</span>
</pre></div>

          </td>
        </tr>
        
        <tr>
          <td class="docs">
            <p>With all of this in place, we can now implement our
custom sort by converting the original <code>fruits</code> slice
to <code>byLength</code>, and then use <code>sort.Sort</code> on that typed
slice.</p>

          </td>
          <td class="code">
            
          <div class="highlight"><pre><span class="kd">func</span> <span class="nx">main</span><span class="p">()</span> <span class="p">{</span>
    <span class="nx">fruits</span> <span class="o">:=</span> <span class="p">[]</span><span class="kt">string</span><span class="p">{</span><span class="s">&quot;peach&quot;</span><span class="p">,</span> <span class="s">&quot;banana&quot;</span><span class="p">,</span> <span class="s">&quot;kiwi&quot;</span><span class="p">}</span>
    <span class="nx">sort</span><span class="p">.</span><span class="nx">Sort</span><span class="p">(</span><span class="nx">byLength</span><span class="p">(</span><span class="nx">fruits</span><span class="p">))</span>
    <span class="nx">fmt</span><span class="p">.</span><span class="nx">Println</span><span class="p">(</span><span class="nx">fruits</span><span class="p">)</span>
<span class="p">}</span>
</pre></div>

          </td>
        </tr>
        
      </table>
      
      <table>
        
        <tr>
          <td class="docs">
            <p>Running our program shows a list sorted by string
length, as desired.</p>

          </td>
          <td class="code leading">
            
          <div class="highlight"><pre><span class="gp">$</span> go run sorting-by-functions.go 
<span class="go">[kiwi peach banana]</span>
</pre></div>

          </td>
        </tr>
        
        <tr>
          <td class="docs">
            <p>By following this same pattern of creating a custom
type, implementing the three <code>Interface</code> methods on that
type, and then calling sort.Sort on a collection of that
custom type, we can sort Go slices by arbitrary
functions.</p>

          </td>
          <td class="code empty">
            
          
          </td>
        </tr>
        
      </table>
      
      
      <p class="next">
        Next example: <a href="panic">Panic</a>.
      </p>
      
      <p class="next">
        Jump to:
        <select id="examples" onchange="onChange(event)">
        
          <option value="hello-world">Hello World</option>  
        
          <option value="values">Values</option>  
        
          <option value="variables">Variables</option>  
        
          <option value="constants">Constants</option>  
        
          <option value="for">For</option>  
        
          <option value="if-else">If/Else</option>  
        
          <option value="switch">Switch</option>  
        
          <option value="arrays">Arrays</option>  
        
          <option value="slices">Slices</option>  
        
          <option value="maps">Maps</option>  
        
          <option value="range">Range</option>  
        
          <option value="functions">Functions</option>  
        
          <option value="multiple-return-values">Multiple Return Values</option>  
        
          <option value="variadic-functions">Variadic Functions</option>  
        
          <option value="closures">Closures</option>  
        
          <option value="recursion">Recursion</option>  
        
          <option value="pointers">Pointers</option>  
        
          <option value="structs">Structs</option>  
        
          <option value="methods">Methods</option>  
        
          <option value="interfaces">Interfaces</option>  
        
          <option value="errors">Errors</option>  
        
          <option value="goroutines">Goroutines</option>  
        
          <option value="channels">Channels</option>  
        
          <option value="channel-buffering">Channel Buffering</option>  
        
          <option value="channel-synchronization">Channel Synchronization</option>  
        
          <option value="channel-directions">Channel Directions</option>  
        
          <option value="select">Select</option>  
        
          <option value="timeouts">Timeouts</option>  
        
          <option value="non-blocking-channel-operations">Non-Blocking Channel Operations</option>  
        
          <option value="closing-channels">Closing Channels</option>  
        
          <option value="range-over-channels">Range over Channels</option>  
        
          <option value="timers">Timers</option>  
        
          <option value="tickers">Tickers</option>  
        
          <option value="worker-pools">Worker Pools</option>  
        
          <option value="waitgroups">WaitGroups</option>  
        
          <option value="rate-limiting">Rate Limiting</option>  
        
          <option value="atomic-counters">Atomic Counters</option>  
        
          <option value="mutexes">Mutexes</option>  
        
          <option value="stateful-goroutines">Stateful Goroutines</option>  
        
          <option value="sorting">Sorting</option>  
        
          <option value="sorting-by-functions">Sorting by Functions</option>  
        
          <option value="panic">Panic</option>  
        
          <option value="defer">Defer</option>  
        
          <option value="collection-functions">Collection Functions</option>  
        
          <option value="string-functions">String Functions</option>  
        
          <option value="string-formatting">String Formatting</option>  
        
          <option value="regular-expressions">Regular Expressions</option>  
        
          <option value="json">JSON</option>  
        
          <option value="xml">XML</option>  
        
          <option value="time">Time</option>  
        
          <option value="epoch">Epoch</option>  
        
          <option value="time-formatting-parsing">Time Formatting / Parsing</option>  
        
          <option value="random-numbers">Random Numbers</option>  
        
          <option value="number-parsing">Number Parsing</option>  
        
          <option value="url-parsing">URL Parsing</option>  
        
          <option value="sha1-hashes">SHA1 Hashes</option>  
        
          <option value="base64-encoding">Base64 Encoding</option>  
        
          <option value="reading-files">Reading Files</option>  
        
          <option value="writing-files">Writing Files</option>  
        
          <option value="line-filters">Line Filters</option>  
        
          <option value="file-paths">File Paths</option>  
        
          <option value="directories">Directories</option>  
        
          <option value="temporary-files-and-directories">Temporary Files and Directories</option>  
        
          <option value="testing">Testing</option>  
        
          <option value="command-line-arguments">Command-Line Arguments</option>  
        
          <option value="command-line-flags">Command-Line Flags</option>  
        
          <option value="command-line-subcommands">Command-Line Subcommands</option>  
        
          <option value="environment-variables">Environment Variables</option>  
        
          <option value="http-clients">HTTP Clients</option>  
        
          <option value="http-servers">HTTP Servers</option>  
        
          <option value="context">Context</option>  
        
          <option value="spawning-processes">Spawning Processes</option>  
        
          <option value="execing-processes">Exec'ing Processes</option>  
        
          <option value="signals">Signals</option>  
        
          <option value="exit">Exit</option>  
        
        </select>
      </p>
      <p class="footer">
        by <a href="https://markmcgranaghan.com">Mark McGranaghan</a> | <a href="https://github.com/mmcgrana/gobyexample/blob/master/examples/sorting-by-functions">source</a> | <a href="https://github.com/mmcgrana/gobyexample#license">license</a>
      </p>
    </div>
    <script>
      var codeLines = [];
      codeLines.push('');codeLines.push('package main\u000A');codeLines.push('import (\u000A    \"fmt\"\u000A    \"sort\"\u000A)\u000A');codeLines.push('type byLength []string\u000A');codeLines.push('func (s byLength) Len() int {\u000A    return len(s)\u000A}\u000Afunc (s byLength) Swap(i, j int) {\u000A    s[i], s[j] = s[j], s[i]\u000A}\u000Afunc (s byLength) Less(i, j int) bool {\u000A    return len(s[i]) \x3C len(s[j])\u000A}\u000A');codeLines.push('func main() {\u000A    fruits := []string{\"peach\", \"banana\", \"kiwi\"}\u000A    sort.Sort(byLength(fruits))\u000A    fmt.Println(fruits)\u000A}\u000A');codeLines.push('');codeLines.push('');
    </script>
    <script src="site.js" async></script>
  </body>
</html>
