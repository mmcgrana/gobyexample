<!DOCTYPE html>
<html>
  <head>
    <meta charset="utf-8">
    <title>Go by Example: Methods</title>
    <link rel=stylesheet href="site.css">
  </head>
  <script>
      onkeydown = (e) => {
          
          if (e.key == "ArrowLeft") {
              window.location.href = 'structs';
          }
          
          
          if (e.key == "ArrowRight") {
              window.location.href = 'interfaces';
          }
          
      }
  </script>
  <body>
    <div class="example" id="methods">
      <h2><a href="./">Go by Example</a>: Methods</h2>
      
      <table>
        
        <tr>
          <td class="docs">
            <p>Go supports <em>methods</em> defined on struct types.</p>

          </td>
          <td class="code empty leading">
            
          
          </td>
        </tr>
        
        <tr>
          <td class="docs">
            
          </td>
          <td class="code leading">
            <a href="https://go.dev/play/p/4wmDCAydC1e"><img title="Run code" src="play.png" class="run" /></a><img title="Copy code" src="clipboard.png" class="copy" />
          <pre class="chroma"><span class="kn">package</span> <span class="nx">main</span>
</pre>
          </td>
        </tr>
        
        <tr>
          <td class="docs">
            
          </td>
          <td class="code leading">
            
          <pre class="chroma"><span class="kn">import</span> <span class="s">&#34;fmt&#34;</span>
</pre>
          </td>
        </tr>
        
        <tr>
          <td class="docs">
            
          </td>
          <td class="code leading">
            
          <pre class="chroma"><span class="kd">type</span> <span class="nx">rect</span> <span class="kd">struct</span> <span class="p">{</span>
    <span class="nx">width</span><span class="p">,</span> <span class="nx">height</span> <span class="kt">int</span>
<span class="p">}</span>
</pre>
          </td>
        </tr>
        
        <tr>
          <td class="docs">
            <p>This <code>area</code> method has a <em>receiver type</em> of <code>*rect</code>.</p>

          </td>
          <td class="code leading">
            
          <pre class="chroma">
<span class="kd">func</span> <span class="p">(</span><span class="nx">r</span> <span class="o">*</span><span class="nx">rect</span><span class="p">)</span> <span class="nf">area</span><span class="p">()</span> <span class="kt">int</span> <span class="p">{</span>
    <span class="k">return</span> <span class="nx">r</span><span class="p">.</span><span class="nx">width</span> <span class="o">*</span> <span class="nx">r</span><span class="p">.</span><span class="nx">height</span>
<span class="p">}</span>
</pre>
          </td>
        </tr>
        
        <tr>
          <td class="docs">
            <p>Methods can be defined for either pointer or value
receiver types. Here&rsquo;s an example of a value receiver.</p>

          </td>
          <td class="code leading">
            
          <pre class="chroma">
<span class="kd">func</span> <span class="p">(</span><span class="nx">r</span> <span class="nx">rect</span><span class="p">)</span> <span class="nf">perim</span><span class="p">()</span> <span class="kt">int</span> <span class="p">{</span>
    <span class="k">return</span> <span class="mi">2</span><span class="o">*</span><span class="nx">r</span><span class="p">.</span><span class="nx">width</span> <span class="o">+</span> <span class="mi">2</span><span class="o">*</span><span class="nx">r</span><span class="p">.</span><span class="nx">height</span>
<span class="p">}</span>
</pre>
          </td>
        </tr>
        
        <tr>
          <td class="docs">
            
          </td>
          <td class="code leading">
            
          <pre class="chroma"><span class="kd">func</span> <span class="nf">main</span><span class="p">()</span> <span class="p">{</span>
    <span class="nx">r</span> <span class="o">:=</span> <span class="nx">rect</span><span class="p">{</span><span class="nx">width</span><span class="p">:</span> <span class="mi">10</span><span class="p">,</span> <span class="nx">height</span><span class="p">:</span> <span class="mi">5</span><span class="p">}</span>
</pre>
          </td>
        </tr>
        
        <tr>
          <td class="docs">
            <p>Here we call the 2 methods defined for our struct.</p>

          </td>
          <td class="code leading">
            
          <pre class="chroma">
    <span class="nx">fmt</span><span class="p">.</span><span class="nf">Println</span><span class="p">(</span><span class="s">&#34;area: &#34;</span><span class="p">,</span> <span class="nx">r</span><span class="p">.</span><span class="nf">area</span><span class="p">())</span>
    <span class="nx">fmt</span><span class="p">.</span><span class="nf">Println</span><span class="p">(</span><span class="s">&#34;perim:&#34;</span><span class="p">,</span> <span class="nx">r</span><span class="p">.</span><span class="nf">perim</span><span class="p">())</span>
</pre>
          </td>
        </tr>
        
        <tr>
          <td class="docs">
            <p>Go automatically handles conversion between values
and pointers for method calls. You may want to use
a pointer receiver type to avoid copying on method
calls or to allow the method to mutate the
receiving struct.</p>

          </td>
          <td class="code">
            
          <pre class="chroma">
    <span class="nx">rp</span> <span class="o">:=</span> <span class="o">&amp;</span><span class="nx">r</span>
    <span class="nx">fmt</span><span class="p">.</span><span class="nf">Println</span><span class="p">(</span><span class="s">&#34;area: &#34;</span><span class="p">,</span> <span class="nx">rp</span><span class="p">.</span><span class="nf">area</span><span class="p">())</span>
    <span class="nx">fmt</span><span class="p">.</span><span class="nf">Println</span><span class="p">(</span><span class="s">&#34;perim:&#34;</span><span class="p">,</span> <span class="nx">rp</span><span class="p">.</span><span class="nf">perim</span><span class="p">())</span>
<span class="p">}</span>
</pre>
          </td>
        </tr>
        
      </table>
      
      <table>
        
        <tr>
          <td class="docs">
            
          </td>
          <td class="code leading">
            
          <pre class="chroma"><span class="gp">$</span> go run methods.go 
<span class="go">area:  50
</span><span class="go">perim: 30
</span><span class="go">area:  50
</span><span class="go">perim: 30</span></pre>
          </td>
        </tr>
        
        <tr>
          <td class="docs">
            <p>Next we&rsquo;ll look at Go&rsquo;s mechanism for grouping and
naming related sets of methods: interfaces.</p>

          </td>
          <td class="code empty">
            
          
          </td>
        </tr>
        
      </table>
      
      
      <p class="next">
        Next example: <a href="interfaces">Interfaces</a>.
      </p>
      

    <p class="footer">
      <script>
        window.onload = function() {
          function styleAllTags(tag, style, value){
            document.querySelectorAll(tag).forEach((tag) => {
              tag.style[style] = value
            })
          }

          var themeButton = document.getElementById('theme-button');
          var body = document.getElementsByTagName('body')[0];

          var lightText = "#ffffffeb";
          var darkText = "#252519";
          var lightBackground = "white";
          var darkBackground = "#1a202c";
          var lightCodeBackground = "#f0f0f0";
          var darkCodeBackground = "#333333";


          function activateTheme(theme) {
            if (theme === 'dark') {
              body.style.color = lightText;
              body.style.backgroundColor = darkBackground;
              styleAllTags('a', 'color', lightText)
              styleAllTags('td.code', 'background', darkCodeBackground);
              styleAllTags('td.code.empty', 'background', darkBackground)
            } else {
              body.style.color = darkText;
              body.style.backgroundColor = lightBackground;
              styleAllTags('a', 'color', darkText)
              styleAllTags('td.code', 'background', lightCodeBackground)
              styleAllTags('td.code.empty', 'background', lightBackground)
            }
            localStorage.setItem('theme', theme);
          }

          var currentTheme = localStorage.getItem('theme');
          if (currentTheme === 'light' || currentTheme === 'dark') {
            activateTheme(currentTheme);
          } else {
            activateTheme('light');
          }

          themeButton.onclick = function() {
            var newTheme = localStorage.getItem('theme') === 'dark' ? 'light' : 'dark';
            activateTheme(newTheme);
          }
        }
      </script>
      by <a href="https://markmcgranaghan.com">Mark McGranaghan</a> and <a href="https://eli.thegreenplace.net">Eli Bendersky</a> | <a href="https://github.com/mmcgrana/gobyexample">source</a> | <a href="https://github.com/mmcgrana/gobyexample#license">license</a> | <button id="theme-button">Toggle theme</button>
    </p>

    </div>
    <script>
      var codeLines = [];
      codeLines.push('');codeLines.push('package main\u000A');codeLines.push('import \"fmt\"\u000A');codeLines.push('type rect struct {\u000A    width, height int\u000A}\u000A');codeLines.push('func (r *rect) area() int {\u000A    return r.width * r.height\u000A}\u000A');codeLines.push('func (r rect) perim() int {\u000A    return 2*r.width + 2*r.height\u000A}\u000A');codeLines.push('func main() {\u000A    r :\u003D rect{width: 10, height: 5}\u000A');codeLines.push('    fmt.Println(\"area: \", r.area())\u000A    fmt.Println(\"perim:\", r.perim())\u000A');codeLines.push('    rp :\u003D \u0026r\u000A    fmt.Println(\"area: \", rp.area())\u000A    fmt.Println(\"perim:\", rp.perim())\u000A}\u000A');codeLines.push('');codeLines.push('');
    </script>
    <script src="site.js" async></script>
  </body>
</html>
