<!DOCTYPE html>
<html>
  <head>
    <meta charset="utf-8">
    <title>Go by Example: Testing</title>
    <link rel=stylesheet href="site.css">
  </head>
  <script>
      onkeydown = (e) => {
          
          if (e.key == "ArrowLeft") {
              window.location.href = 'temporary-files-and-directories';
          }
          
          
          if (e.key == "ArrowRight") {
              window.location.href = 'command-line-arguments';
          }
          
      }

      function onChange(e) {
        window.location.href = event.target.value
      }

      window.addEventListener('DOMContentLoaded', () => {
        document.getElementById("examples").value = window.location.pathname.replace('/', '')
      })
  </script>
  <body>
    <div class="example" id="testing">
      <h2><a href="./">Go by Example</a>: Testing</h2>
      
      <table>
        
        <tr>
          <td class="docs">
            <p>Unit testing is an important part of writing
principled Go programs. The <code>testing</code> package
provides the tools we need to write unit tests
and the <code>go test</code> command runs tests.</p>

          </td>
          <td class="code empty leading">
            
          
          </td>
        </tr>
        
        <tr>
          <td class="docs">
            <p>For the sake of demonstration, this code is in package
<code>main</code>, but it could be any package. Testing code
typically lives in the same package as the code it tests.</p>

          </td>
          <td class="code leading">
            <a href="http://play.golang.org/p/jCRgtgRwie3"><img title="Run code" src="play.png" class="run" /></a><img title="Copy code" src="clipboard.png" class="copy" />
          <div class="highlight"><pre><span class="kn">package</span> <span class="nx">main</span>
</pre></div>

          </td>
        </tr>
        
        <tr>
          <td class="docs">
            
          </td>
          <td class="code leading">
            
          <div class="highlight"><pre><span class="kn">import</span> <span class="p">(</span>
    <span class="s">&quot;fmt&quot;</span>
    <span class="s">&quot;testing&quot;</span>
<span class="p">)</span>
</pre></div>

          </td>
        </tr>
        
        <tr>
          <td class="docs">
            <p>We&rsquo;ll be testing this simple implementation of an
integer minimum. Typically, the code we&rsquo;re testing
would be in a source file named something like
<code>intutils.go</code>, and the test file for it would then
be named <code>intutils_test.go</code>.</p>

          </td>
          <td class="code leading">
            
          <div class="highlight"><pre><span class="kd">func</span> <span class="nx">IntMin</span><span class="p">(</span><span class="nx">a</span><span class="p">,</span> <span class="nx">b</span> <span class="kt">int</span><span class="p">)</span> <span class="kt">int</span> <span class="p">{</span>
    <span class="k">if</span> <span class="nx">a</span> <span class="p">&lt;</span> <span class="nx">b</span> <span class="p">{</span>
        <span class="k">return</span> <span class="nx">a</span>
    <span class="p">}</span> <span class="k">else</span> <span class="p">{</span>
        <span class="k">return</span> <span class="nx">b</span>
    <span class="p">}</span>
<span class="p">}</span>
</pre></div>

          </td>
        </tr>
        
        <tr>
          <td class="docs">
            <p>A test is created by writing a function with a name
beginning with <code>Test</code>.</p>

          </td>
          <td class="code leading">
            
          <div class="highlight"><pre><span class="kd">func</span> <span class="nx">TestIntMinBasic</span><span class="p">(</span><span class="nx">t</span> <span class="o">*</span><span class="nx">testing</span><span class="p">.</span><span class="nx">T</span><span class="p">)</span> <span class="p">{</span>
    <span class="nx">ans</span> <span class="o">:=</span> <span class="nx">IntMin</span><span class="p">(</span><span class="mi">2</span><span class="p">,</span> <span class="o">-</span><span class="mi">2</span><span class="p">)</span>
    <span class="k">if</span> <span class="nx">ans</span> <span class="o">!=</span> <span class="o">-</span><span class="mi">2</span> <span class="p">{</span>
</pre></div>

          </td>
        </tr>
        
        <tr>
          <td class="docs">
            <p><code>t.Error*</code> will report test failures but continue
executing the test. <code>t.Fail*</code> will report test
failures and stop the test immediately.</p>

          </td>
          <td class="code leading">
            
          <div class="highlight"><pre>        <span class="nx">t</span><span class="p">.</span><span class="nx">Errorf</span><span class="p">(</span><span class="s">&quot;IntMin(2, -2) = %d; want -2&quot;</span><span class="p">,</span> <span class="nx">ans</span><span class="p">)</span>
    <span class="p">}</span>
<span class="p">}</span>
</pre></div>

          </td>
        </tr>
        
        <tr>
          <td class="docs">
            <p>Writing tests can be repetitive, so it&rsquo;s idiomatic to
use a <em>table-driven style</em>, where test inputs and
expected outputs are listed in a table and a single loop
walks over them and performs the test logic.</p>

          </td>
          <td class="code leading">
            
          <div class="highlight"><pre><span class="kd">func</span> <span class="nx">TestIntMinTableDriven</span><span class="p">(</span><span class="nx">t</span> <span class="o">*</span><span class="nx">testing</span><span class="p">.</span><span class="nx">T</span><span class="p">)</span> <span class="p">{</span>
    <span class="kd">var</span> <span class="nx">tests</span> <span class="p">=</span> <span class="p">[]</span><span class="kd">struct</span> <span class="p">{</span>
        <span class="nx">a</span><span class="p">,</span> <span class="nx">b</span> <span class="kt">int</span>
        <span class="nx">want</span> <span class="kt">int</span>
    <span class="p">}{</span>
        <span class="p">{</span><span class="mi">0</span><span class="p">,</span> <span class="mi">1</span><span class="p">,</span> <span class="mi">0</span><span class="p">},</span>
        <span class="p">{</span><span class="mi">1</span><span class="p">,</span> <span class="mi">0</span><span class="p">,</span> <span class="mi">0</span><span class="p">},</span>
        <span class="p">{</span><span class="mi">2</span><span class="p">,</span> <span class="o">-</span><span class="mi">2</span><span class="p">,</span> <span class="o">-</span><span class="mi">2</span><span class="p">},</span>
        <span class="p">{</span><span class="mi">0</span><span class="p">,</span> <span class="o">-</span><span class="mi">1</span><span class="p">,</span> <span class="o">-</span><span class="mi">1</span><span class="p">},</span>
        <span class="p">{</span><span class="o">-</span><span class="mi">1</span><span class="p">,</span> <span class="mi">0</span><span class="p">,</span> <span class="o">-</span><span class="mi">1</span><span class="p">},</span>
    <span class="p">}</span>
</pre></div>

          </td>
        </tr>
        
        <tr>
          <td class="docs">
            <p>t.Run enables running &ldquo;subtests&rdquo;, one for each
table entry. These are shown separately
when executing <code>go test -v</code>.</p>

          </td>
          <td class="code leading">
            
          <div class="highlight"><pre>    <span class="k">for</span> <span class="nx">_</span><span class="p">,</span> <span class="nx">tt</span> <span class="o">:=</span> <span class="k">range</span> <span class="nx">tests</span> <span class="p">{</span>
</pre></div>

          </td>
        </tr>
        
        <tr>
          <td class="docs">
            
          </td>
          <td class="code">
            
          <div class="highlight"><pre>        <span class="nx">testname</span> <span class="o">:=</span> <span class="nx">fmt</span><span class="p">.</span><span class="nx">Sprintf</span><span class="p">(</span><span class="s">&quot;%d,%d&quot;</span><span class="p">,</span> <span class="nx">tt</span><span class="p">.</span><span class="nx">a</span><span class="p">,</span> <span class="nx">tt</span><span class="p">.</span><span class="nx">b</span><span class="p">)</span>
        <span class="nx">t</span><span class="p">.</span><span class="nx">Run</span><span class="p">(</span><span class="nx">testname</span><span class="p">,</span> <span class="kd">func</span><span class="p">(</span><span class="nx">t</span> <span class="o">*</span><span class="nx">testing</span><span class="p">.</span><span class="nx">T</span><span class="p">)</span> <span class="p">{</span>
            <span class="nx">ans</span> <span class="o">:=</span> <span class="nx">IntMin</span><span class="p">(</span><span class="nx">tt</span><span class="p">.</span><span class="nx">a</span><span class="p">,</span> <span class="nx">tt</span><span class="p">.</span><span class="nx">b</span><span class="p">)</span>
            <span class="k">if</span> <span class="nx">ans</span> <span class="o">!=</span> <span class="nx">tt</span><span class="p">.</span><span class="nx">want</span> <span class="p">{</span>
                <span class="nx">t</span><span class="p">.</span><span class="nx">Errorf</span><span class="p">(</span><span class="s">&quot;got %d, want %d&quot;</span><span class="p">,</span> <span class="nx">ans</span><span class="p">,</span> <span class="nx">tt</span><span class="p">.</span><span class="nx">want</span><span class="p">)</span>
            <span class="p">}</span>
        <span class="p">})</span>
    <span class="p">}</span>
<span class="p">}</span>
</pre></div>

          </td>
        </tr>
        
      </table>
      
      <table>
        
        <tr>
          <td class="docs">
            <p>Run all tests in the current project in verbose mode.</p>

          </td>
          <td class="code">
            
          <div class="highlight"><pre><span class="gp">$</span> go <span class="nb">test</span> -v
<span class="go">== RUN   TestIntMinBasic</span>
<span class="go">--- PASS: TestIntMinBasic (0.00s)</span>
<span class="go">=== RUN   TestIntMinTableDriven</span>
<span class="go">=== RUN   TestIntMinTableDriven/0,1</span>
<span class="go">=== RUN   TestIntMinTableDriven/1,0</span>
<span class="go">=== RUN   TestIntMinTableDriven/2,-2</span>
<span class="go">=== RUN   TestIntMinTableDriven/0,-1</span>
<span class="go">=== RUN   TestIntMinTableDriven/-1,0</span>
<span class="go">--- PASS: TestIntMinTableDriven (0.00s)</span>
<span class="go">    --- PASS: TestIntMinTableDriven/0,1 (0.00s)</span>
<span class="go">    --- PASS: TestIntMinTableDriven/1,0 (0.00s)</span>
<span class="go">    --- PASS: TestIntMinTableDriven/2,-2 (0.00s)</span>
<span class="go">    --- PASS: TestIntMinTableDriven/0,-1 (0.00s)</span>
<span class="go">    --- PASS: TestIntMinTableDriven/-1,0 (0.00s)</span>
<span class="go">PASS</span>
<span class="go">ok      examples/testing    0.023s</span>
</pre></div>

          </td>
        </tr>
        
      </table>
      
      
      <p class="next">
        Next example: <a href="command-line-arguments">Command-Line Arguments</a>.
      </p>
      
      <p class="next">
        Jump to:
        <select id="examples" onchange="onChange(event)">
        
          <option value="hello-world">Hello World</option>  
        
          <option value="values">Values</option>  
        
          <option value="variables">Variables</option>  
        
          <option value="constants">Constants</option>  
        
          <option value="for">For</option>  
        
          <option value="if-else">If/Else</option>  
        
          <option value="switch">Switch</option>  
        
          <option value="arrays">Arrays</option>  
        
          <option value="slices">Slices</option>  
        
          <option value="maps">Maps</option>  
        
          <option value="range">Range</option>  
        
          <option value="functions">Functions</option>  
        
          <option value="multiple-return-values">Multiple Return Values</option>  
        
          <option value="variadic-functions">Variadic Functions</option>  
        
          <option value="closures">Closures</option>  
        
          <option value="recursion">Recursion</option>  
        
          <option value="pointers">Pointers</option>  
        
          <option value="structs">Structs</option>  
        
          <option value="methods">Methods</option>  
        
          <option value="interfaces">Interfaces</option>  
        
          <option value="errors">Errors</option>  
        
          <option value="goroutines">Goroutines</option>  
        
          <option value="channels">Channels</option>  
        
          <option value="channel-buffering">Channel Buffering</option>  
        
          <option value="channel-synchronization">Channel Synchronization</option>  
        
          <option value="channel-directions">Channel Directions</option>  
        
          <option value="select">Select</option>  
        
          <option value="timeouts">Timeouts</option>  
        
          <option value="non-blocking-channel-operations">Non-Blocking Channel Operations</option>  
        
          <option value="closing-channels">Closing Channels</option>  
        
          <option value="range-over-channels">Range over Channels</option>  
        
          <option value="timers">Timers</option>  
        
          <option value="tickers">Tickers</option>  
        
          <option value="worker-pools">Worker Pools</option>  
        
          <option value="waitgroups">WaitGroups</option>  
        
          <option value="rate-limiting">Rate Limiting</option>  
        
          <option value="atomic-counters">Atomic Counters</option>  
        
          <option value="mutexes">Mutexes</option>  
        
          <option value="stateful-goroutines">Stateful Goroutines</option>  
        
          <option value="sorting">Sorting</option>  
        
          <option value="sorting-by-functions">Sorting by Functions</option>  
        
          <option value="panic">Panic</option>  
        
          <option value="defer">Defer</option>  
        
          <option value="collection-functions">Collection Functions</option>  
        
          <option value="string-functions">String Functions</option>  
        
          <option value="string-formatting">String Formatting</option>  
        
          <option value="regular-expressions">Regular Expressions</option>  
        
          <option value="json">JSON</option>  
        
          <option value="xml">XML</option>  
        
          <option value="time">Time</option>  
        
          <option value="epoch">Epoch</option>  
        
          <option value="time-formatting-parsing">Time Formatting / Parsing</option>  
        
          <option value="random-numbers">Random Numbers</option>  
        
          <option value="number-parsing">Number Parsing</option>  
        
          <option value="url-parsing">URL Parsing</option>  
        
          <option value="sha1-hashes">SHA1 Hashes</option>  
        
          <option value="base64-encoding">Base64 Encoding</option>  
        
          <option value="reading-files">Reading Files</option>  
        
          <option value="writing-files">Writing Files</option>  
        
          <option value="line-filters">Line Filters</option>  
        
          <option value="file-paths">File Paths</option>  
        
          <option value="directories">Directories</option>  
        
          <option value="temporary-files-and-directories">Temporary Files and Directories</option>  
        
          <option value="testing">Testing</option>  
        
          <option value="command-line-arguments">Command-Line Arguments</option>  
        
          <option value="command-line-flags">Command-Line Flags</option>  
        
          <option value="command-line-subcommands">Command-Line Subcommands</option>  
        
          <option value="environment-variables">Environment Variables</option>  
        
          <option value="http-clients">HTTP Clients</option>  
        
          <option value="http-servers">HTTP Servers</option>  
        
          <option value="context">Context</option>  
        
          <option value="spawning-processes">Spawning Processes</option>  
        
          <option value="execing-processes">Exec'ing Processes</option>  
        
          <option value="signals">Signals</option>  
        
          <option value="exit">Exit</option>  
        
        </select>
      </p>
      <p class="footer">
        by <a href="https://markmcgranaghan.com">Mark McGranaghan</a> | <a href="https://github.com/mmcgrana/gobyexample/blob/master/examples/testing">source</a> | <a href="https://github.com/mmcgrana/gobyexample#license">license</a>
      </p>
    </div>
    <script>
      var codeLines = [];
      codeLines.push('');codeLines.push('package main\u000A');codeLines.push('import (\u000A    \"fmt\"\u000A    \"testing\"\u000A)\u000A');codeLines.push('func IntMin(a, b int) int {\u000A    if a \x3C b {\u000A        return a\u000A    } else {\u000A        return b\u000A    }\u000A}\u000A');codeLines.push('func TestIntMinBasic(t *testing.T) {\u000A    ans := IntMin(2, -2)\u000A    if ans != -2 {\u000A');codeLines.push('        t.Errorf(\"IntMin(2, -2) = %d; want -2\", ans)\u000A    }\u000A}\u000A');codeLines.push('func TestIntMinTableDriven(t *testing.T) {\u000A    var tests = []struct {\u000A        a, b int\u000A        want int\u000A    }{\u000A        {0, 1, 0},\u000A        {1, 0, 0},\u000A        {2, -2, -2},\u000A        {0, -1, -1},\u000A        {-1, 0, -1},\u000A    }\u000A');codeLines.push('    for _, tt := range tests {\u000A');codeLines.push('        testname := fmt.Sprintf(\"%d,%d\", tt.a, tt.b)\u000A        t.Run(testname, func(t *testing.T) {\u000A            ans := IntMin(tt.a, tt.b)\u000A            if ans != tt.want {\u000A                t.Errorf(\"got %d, want %d\", ans, tt.want)\u000A            }\u000A        })\u000A    }\u000A}\u000A');codeLines.push('');
    </script>
    <script src="site.js" async></script>
  </body>
</html>
