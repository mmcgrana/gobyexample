<!DOCTYPE html>
<html>
  <head>
    <meta charset="utf-8">
    <title>Go by Example: Reading Files</title>
    <link rel=stylesheet href="site.css">
  </head>
  <script>
      onkeydown = (e) => {
          
          if (e.key == "ArrowLeft") {
              window.location.href = 'base64-encoding';
          }
          
          
          if (e.key == "ArrowRight") {
              window.location.href = 'writing-files';
          }
          
      }

      function onChange(e) {
        window.location.href = event.target.value
      }

      window.addEventListener('DOMContentLoaded', () => {
        document.getElementById("examples").value = window.location.pathname.replace('/', '')
      })
  </script>
  <body>
    <div class="example" id="reading-files">
      <h2><a href="./">Go by Example</a>: Reading Files</h2>
      
      <table>
        
        <tr>
          <td class="docs">
            <p>Reading and writing files are basic tasks needed for
many Go programs. First we&rsquo;ll look at some examples of
reading files.</p>

          </td>
          <td class="code empty leading">
            
          
          </td>
        </tr>
        
        <tr>
          <td class="docs">
            
          </td>
          <td class="code leading">
            <a href="http://play.golang.org/p/kF0cDC0drsX"><img title="Run code" src="play.png" class="run" /></a><img title="Copy code" src="clipboard.png" class="copy" />
          <div class="highlight"><pre><span class="kn">package</span> <span class="nx">main</span>
</pre></div>

          </td>
        </tr>
        
        <tr>
          <td class="docs">
            
          </td>
          <td class="code leading">
            
          <div class="highlight"><pre><span class="kn">import</span> <span class="p">(</span>
    <span class="s">&quot;bufio&quot;</span>
    <span class="s">&quot;fmt&quot;</span>
    <span class="s">&quot;io&quot;</span>
    <span class="s">&quot;io/ioutil&quot;</span>
    <span class="s">&quot;os&quot;</span>
<span class="p">)</span>
</pre></div>

          </td>
        </tr>
        
        <tr>
          <td class="docs">
            <p>Reading files requires checking most calls for errors.
This helper will streamline our error checks below.</p>

          </td>
          <td class="code leading">
            
          <div class="highlight"><pre><span class="kd">func</span> <span class="nx">check</span><span class="p">(</span><span class="nx">e</span> <span class="kt">error</span><span class="p">)</span> <span class="p">{</span>
    <span class="k">if</span> <span class="nx">e</span> <span class="o">!=</span> <span class="kc">nil</span> <span class="p">{</span>
        <span class="nb">panic</span><span class="p">(</span><span class="nx">e</span><span class="p">)</span>
    <span class="p">}</span>
<span class="p">}</span>
</pre></div>

          </td>
        </tr>
        
        <tr>
          <td class="docs">
            
          </td>
          <td class="code leading">
            
          <div class="highlight"><pre><span class="kd">func</span> <span class="nx">main</span><span class="p">()</span> <span class="p">{</span>
</pre></div>

          </td>
        </tr>
        
        <tr>
          <td class="docs">
            <p>Perhaps the most basic file reading task is
slurping a file&rsquo;s entire contents into memory.</p>

          </td>
          <td class="code leading">
            
          <div class="highlight"><pre>    <span class="nx">dat</span><span class="p">,</span> <span class="nx">err</span> <span class="o">:=</span> <span class="nx">ioutil</span><span class="p">.</span><span class="nx">ReadFile</span><span class="p">(</span><span class="s">&quot;/tmp/dat&quot;</span><span class="p">)</span>
    <span class="nx">check</span><span class="p">(</span><span class="nx">err</span><span class="p">)</span>
    <span class="nx">fmt</span><span class="p">.</span><span class="nx">Print</span><span class="p">(</span><span class="nb">string</span><span class="p">(</span><span class="nx">dat</span><span class="p">))</span>
</pre></div>

          </td>
        </tr>
        
        <tr>
          <td class="docs">
            <p>You&rsquo;ll often want more control over how and what
parts of a file are read. For these tasks, start
by <code>Open</code>ing a file to obtain an <code>os.File</code> value.</p>

          </td>
          <td class="code leading">
            
          <div class="highlight"><pre>    <span class="nx">f</span><span class="p">,</span> <span class="nx">err</span> <span class="o">:=</span> <span class="nx">os</span><span class="p">.</span><span class="nx">Open</span><span class="p">(</span><span class="s">&quot;/tmp/dat&quot;</span><span class="p">)</span>
    <span class="nx">check</span><span class="p">(</span><span class="nx">err</span><span class="p">)</span>
</pre></div>

          </td>
        </tr>
        
        <tr>
          <td class="docs">
            <p>Read some bytes from the beginning of the file.
Allow up to 5 to be read but also note how many
actually were read.</p>

          </td>
          <td class="code leading">
            
          <div class="highlight"><pre>    <span class="nx">b1</span> <span class="o">:=</span> <span class="nb">make</span><span class="p">([]</span><span class="kt">byte</span><span class="p">,</span> <span class="mi">5</span><span class="p">)</span>
    <span class="nx">n1</span><span class="p">,</span> <span class="nx">err</span> <span class="o">:=</span> <span class="nx">f</span><span class="p">.</span><span class="nx">Read</span><span class="p">(</span><span class="nx">b1</span><span class="p">)</span>
    <span class="nx">check</span><span class="p">(</span><span class="nx">err</span><span class="p">)</span>
    <span class="nx">fmt</span><span class="p">.</span><span class="nx">Printf</span><span class="p">(</span><span class="s">&quot;%d bytes: %s\n&quot;</span><span class="p">,</span> <span class="nx">n1</span><span class="p">,</span> <span class="nb">string</span><span class="p">(</span><span class="nx">b1</span><span class="p">[:</span><span class="nx">n1</span><span class="p">]))</span>
</pre></div>

          </td>
        </tr>
        
        <tr>
          <td class="docs">
            <p>You can also <code>Seek</code> to a known location in the file
and <code>Read</code> from there.</p>

          </td>
          <td class="code leading">
            
          <div class="highlight"><pre>    <span class="nx">o2</span><span class="p">,</span> <span class="nx">err</span> <span class="o">:=</span> <span class="nx">f</span><span class="p">.</span><span class="nx">Seek</span><span class="p">(</span><span class="mi">6</span><span class="p">,</span> <span class="mi">0</span><span class="p">)</span>
    <span class="nx">check</span><span class="p">(</span><span class="nx">err</span><span class="p">)</span>
    <span class="nx">b2</span> <span class="o">:=</span> <span class="nb">make</span><span class="p">([]</span><span class="kt">byte</span><span class="p">,</span> <span class="mi">2</span><span class="p">)</span>
    <span class="nx">n2</span><span class="p">,</span> <span class="nx">err</span> <span class="o">:=</span> <span class="nx">f</span><span class="p">.</span><span class="nx">Read</span><span class="p">(</span><span class="nx">b2</span><span class="p">)</span>
    <span class="nx">check</span><span class="p">(</span><span class="nx">err</span><span class="p">)</span>
    <span class="nx">fmt</span><span class="p">.</span><span class="nx">Printf</span><span class="p">(</span><span class="s">&quot;%d bytes @ %d: &quot;</span><span class="p">,</span> <span class="nx">n2</span><span class="p">,</span> <span class="nx">o2</span><span class="p">)</span>
    <span class="nx">fmt</span><span class="p">.</span><span class="nx">Printf</span><span class="p">(</span><span class="s">&quot;%v\n&quot;</span><span class="p">,</span> <span class="nb">string</span><span class="p">(</span><span class="nx">b2</span><span class="p">[:</span><span class="nx">n2</span><span class="p">]))</span>
</pre></div>

          </td>
        </tr>
        
        <tr>
          <td class="docs">
            <p>The <code>io</code> package provides some functions that may
be helpful for file reading. For example, reads
like the ones above can be more robustly
implemented with <code>ReadAtLeast</code>.</p>

          </td>
          <td class="code leading">
            
          <div class="highlight"><pre>    <span class="nx">o3</span><span class="p">,</span> <span class="nx">err</span> <span class="o">:=</span> <span class="nx">f</span><span class="p">.</span><span class="nx">Seek</span><span class="p">(</span><span class="mi">6</span><span class="p">,</span> <span class="mi">0</span><span class="p">)</span>
    <span class="nx">check</span><span class="p">(</span><span class="nx">err</span><span class="p">)</span>
    <span class="nx">b3</span> <span class="o">:=</span> <span class="nb">make</span><span class="p">([]</span><span class="kt">byte</span><span class="p">,</span> <span class="mi">2</span><span class="p">)</span>
    <span class="nx">n3</span><span class="p">,</span> <span class="nx">err</span> <span class="o">:=</span> <span class="nx">io</span><span class="p">.</span><span class="nx">ReadAtLeast</span><span class="p">(</span><span class="nx">f</span><span class="p">,</span> <span class="nx">b3</span><span class="p">,</span> <span class="mi">2</span><span class="p">)</span>
    <span class="nx">check</span><span class="p">(</span><span class="nx">err</span><span class="p">)</span>
    <span class="nx">fmt</span><span class="p">.</span><span class="nx">Printf</span><span class="p">(</span><span class="s">&quot;%d bytes @ %d: %s\n&quot;</span><span class="p">,</span> <span class="nx">n3</span><span class="p">,</span> <span class="nx">o3</span><span class="p">,</span> <span class="nb">string</span><span class="p">(</span><span class="nx">b3</span><span class="p">))</span>
</pre></div>

          </td>
        </tr>
        
        <tr>
          <td class="docs">
            <p>There is no built-in rewind, but <code>Seek(0, 0)</code>
accomplishes this.</p>

          </td>
          <td class="code leading">
            
          <div class="highlight"><pre>    <span class="nx">_</span><span class="p">,</span> <span class="nx">err</span> <span class="p">=</span> <span class="nx">f</span><span class="p">.</span><span class="nx">Seek</span><span class="p">(</span><span class="mi">0</span><span class="p">,</span> <span class="mi">0</span><span class="p">)</span>
    <span class="nx">check</span><span class="p">(</span><span class="nx">err</span><span class="p">)</span>
</pre></div>

          </td>
        </tr>
        
        <tr>
          <td class="docs">
            <p>The <code>bufio</code> package implements a buffered
reader that may be useful both for its efficiency
with many small reads and because of the additional
reading methods it provides.</p>

          </td>
          <td class="code leading">
            
          <div class="highlight"><pre>    <span class="nx">r4</span> <span class="o">:=</span> <span class="nx">bufio</span><span class="p">.</span><span class="nx">NewReader</span><span class="p">(</span><span class="nx">f</span><span class="p">)</span>
    <span class="nx">b4</span><span class="p">,</span> <span class="nx">err</span> <span class="o">:=</span> <span class="nx">r4</span><span class="p">.</span><span class="nx">Peek</span><span class="p">(</span><span class="mi">5</span><span class="p">)</span>
    <span class="nx">check</span><span class="p">(</span><span class="nx">err</span><span class="p">)</span>
    <span class="nx">fmt</span><span class="p">.</span><span class="nx">Printf</span><span class="p">(</span><span class="s">&quot;5 bytes: %s\n&quot;</span><span class="p">,</span> <span class="nb">string</span><span class="p">(</span><span class="nx">b4</span><span class="p">))</span>
</pre></div>

          </td>
        </tr>
        
        <tr>
          <td class="docs">
            <p>Close the file when you&rsquo;re done (usually this would
be scheduled immediately after <code>Open</code>ing with
<code>defer</code>).</p>

          </td>
          <td class="code">
            
          <div class="highlight"><pre>    <span class="nx">f</span><span class="p">.</span><span class="nx">Close</span><span class="p">()</span>
<span class="p">}</span>
</pre></div>

          </td>
        </tr>
        
      </table>
      
      <table>
        
        <tr>
          <td class="docs">
            
          </td>
          <td class="code leading">
            
          <div class="highlight"><pre><span class="gp">$</span> <span class="nb">echo</span> <span class="s2">&quot;hello&quot;</span> &gt; /tmp/dat
<span class="gp">$</span> <span class="nb">echo</span> <span class="s2">&quot;go&quot;</span> &gt;&gt;   /tmp/dat
<span class="gp">$</span> go run reading-files.go
<span class="go">hello</span>
<span class="go">go</span>
<span class="go">5 bytes: hello</span>
<span class="go">2 bytes @ 6: go</span>
<span class="go">2 bytes @ 6: go</span>
<span class="go">5 bytes: hello</span>
</pre></div>

          </td>
        </tr>
        
        <tr>
          <td class="docs">
            <p>Next we&rsquo;ll look at writing files.</p>

          </td>
          <td class="code empty">
            
          
          </td>
        </tr>
        
      </table>
      
      
      <p class="next">
        Next example: <a href="writing-files">Writing Files</a>.
      </p>
      
      <p class="next">
        Jump to:
        <select id="examples" onchange="onChange(event)">
        
          <option value="hello-world">Hello World</option>  
        
          <option value="values">Values</option>  
        
          <option value="variables">Variables</option>  
        
          <option value="constants">Constants</option>  
        
          <option value="for">For</option>  
        
          <option value="if-else">If/Else</option>  
        
          <option value="switch">Switch</option>  
        
          <option value="arrays">Arrays</option>  
        
          <option value="slices">Slices</option>  
        
          <option value="maps">Maps</option>  
        
          <option value="range">Range</option>  
        
          <option value="functions">Functions</option>  
        
          <option value="multiple-return-values">Multiple Return Values</option>  
        
          <option value="variadic-functions">Variadic Functions</option>  
        
          <option value="closures">Closures</option>  
        
          <option value="recursion">Recursion</option>  
        
          <option value="pointers">Pointers</option>  
        
          <option value="structs">Structs</option>  
        
          <option value="methods">Methods</option>  
        
          <option value="interfaces">Interfaces</option>  
        
          <option value="errors">Errors</option>  
        
          <option value="goroutines">Goroutines</option>  
        
          <option value="channels">Channels</option>  
        
          <option value="channel-buffering">Channel Buffering</option>  
        
          <option value="channel-synchronization">Channel Synchronization</option>  
        
          <option value="channel-directions">Channel Directions</option>  
        
          <option value="select">Select</option>  
        
          <option value="timeouts">Timeouts</option>  
        
          <option value="non-blocking-channel-operations">Non-Blocking Channel Operations</option>  
        
          <option value="closing-channels">Closing Channels</option>  
        
          <option value="range-over-channels">Range over Channels</option>  
        
          <option value="timers">Timers</option>  
        
          <option value="tickers">Tickers</option>  
        
          <option value="worker-pools">Worker Pools</option>  
        
          <option value="waitgroups">WaitGroups</option>  
        
          <option value="rate-limiting">Rate Limiting</option>  
        
          <option value="atomic-counters">Atomic Counters</option>  
        
          <option value="mutexes">Mutexes</option>  
        
          <option value="stateful-goroutines">Stateful Goroutines</option>  
        
          <option value="sorting">Sorting</option>  
        
          <option value="sorting-by-functions">Sorting by Functions</option>  
        
          <option value="panic">Panic</option>  
        
          <option value="defer">Defer</option>  
        
          <option value="collection-functions">Collection Functions</option>  
        
          <option value="string-functions">String Functions</option>  
        
          <option value="string-formatting">String Formatting</option>  
        
          <option value="regular-expressions">Regular Expressions</option>  
        
          <option value="json">JSON</option>  
        
          <option value="xml">XML</option>  
        
          <option value="time">Time</option>  
        
          <option value="epoch">Epoch</option>  
        
          <option value="time-formatting-parsing">Time Formatting / Parsing</option>  
        
          <option value="random-numbers">Random Numbers</option>  
        
          <option value="number-parsing">Number Parsing</option>  
        
          <option value="url-parsing">URL Parsing</option>  
        
          <option value="sha1-hashes">SHA1 Hashes</option>  
        
          <option value="base64-encoding">Base64 Encoding</option>  
        
          <option value="reading-files">Reading Files</option>  
        
          <option value="writing-files">Writing Files</option>  
        
          <option value="line-filters">Line Filters</option>  
        
          <option value="file-paths">File Paths</option>  
        
          <option value="directories">Directories</option>  
        
          <option value="temporary-files-and-directories">Temporary Files and Directories</option>  
        
          <option value="testing">Testing</option>  
        
          <option value="command-line-arguments">Command-Line Arguments</option>  
        
          <option value="command-line-flags">Command-Line Flags</option>  
        
          <option value="command-line-subcommands">Command-Line Subcommands</option>  
        
          <option value="environment-variables">Environment Variables</option>  
        
          <option value="http-clients">HTTP Clients</option>  
        
          <option value="http-servers">HTTP Servers</option>  
        
          <option value="context">Context</option>  
        
          <option value="spawning-processes">Spawning Processes</option>  
        
          <option value="execing-processes">Exec'ing Processes</option>  
        
          <option value="signals">Signals</option>  
        
          <option value="exit">Exit</option>  
        
        </select>
      </p>
      <p class="footer">
        by <a href="https://markmcgranaghan.com">Mark McGranaghan</a> | <a href="https://github.com/mmcgrana/gobyexample/blob/master/examples/reading-files">source</a> | <a href="https://github.com/mmcgrana/gobyexample#license">license</a>
      </p>
    </div>
    <script>
      var codeLines = [];
      codeLines.push('');codeLines.push('package main\u000A');codeLines.push('import (\u000A    \"bufio\"\u000A    \"fmt\"\u000A    \"io\"\u000A    \"io/ioutil\"\u000A    \"os\"\u000A)\u000A');codeLines.push('func check(e error) {\u000A    if e != nil {\u000A        panic(e)\u000A    }\u000A}\u000A');codeLines.push('func main() {\u000A');codeLines.push('    dat, err := ioutil.ReadFile(\"/tmp/dat\")\u000A    check(err)\u000A    fmt.Print(string(dat))\u000A');codeLines.push('    f, err := os.Open(\"/tmp/dat\")\u000A    check(err)\u000A');codeLines.push('    b1 := make([]byte, 5)\u000A    n1, err := f.Read(b1)\u000A    check(err)\u000A    fmt.Printf(\"%d bytes: %s\\n\", n1, string(b1[:n1]))\u000A');codeLines.push('    o2, err := f.Seek(6, 0)\u000A    check(err)\u000A    b2 := make([]byte, 2)\u000A    n2, err := f.Read(b2)\u000A    check(err)\u000A    fmt.Printf(\"%d bytes @ %d: \", n2, o2)\u000A    fmt.Printf(\"%v\\n\", string(b2[:n2]))\u000A');codeLines.push('    o3, err := f.Seek(6, 0)\u000A    check(err)\u000A    b3 := make([]byte, 2)\u000A    n3, err := io.ReadAtLeast(f, b3, 2)\u000A    check(err)\u000A    fmt.Printf(\"%d bytes @ %d: %s\\n\", n3, o3, string(b3))\u000A');codeLines.push('    _, err = f.Seek(0, 0)\u000A    check(err)\u000A');codeLines.push('    r4 := bufio.NewReader(f)\u000A    b4, err := r4.Peek(5)\u000A    check(err)\u000A    fmt.Printf(\"5 bytes: %s\\n\", string(b4))\u000A');codeLines.push('    f.Close()\u000A}\u000A');codeLines.push('');codeLines.push('');
    </script>
    <script src="site.js" async></script>
  </body>
</html>
